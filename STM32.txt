配置：
Define: USE_STDPERIPH_DRIVER,STM32F10X_MD
Paths:  .\Baisc;.\CMSIS;.\Hardware;.\Lib\src;.\Startup;.\User;.\Lib\inc

STM32
项目结构：
Target
	SMSIS:
		core_cm3.c
		system_stm32f10x.c
Lib
	misc.c
	stm32f10x.gpio.c
	...
Startup
	Startup_stm32f10x.md.s
User
	stm32f10x_it.c
	main.c

编程：
1.结构体说明
1.1端口初始化结构体：
GPIO_InitTypeDef  ｛
uint16_t GPIO_Pin;   端口号（stm32f10x_gpio.h中存在宏定义）
GPIOSpeed_TypeDef GPIO_Speed;   速度（仅输出模式需要设置）
GPIOMode_TypeDef GPIO_Mode;    模式
｝


2.宏定义说明：
	2.1选择IO接口工作方式：
	typedef enum
	{ GPIO_Mode_AIN = 0x0,   //模拟输入
	  GPIO_Mode_IN_FLOATING = 0x04,    //浮空输入
	  GPIO_Mode_IPD = 0x28,    //下拉输入
	  GPIO_Mode_IPU = 0x48,    //上拉输入
	  GPIO_Mode_Out_OD = 0x14,    //开漏输出
	  GPIO_Mode_Out_PP = 0x10,    //推挽输出
	  GPIO_Mode_AF_OD = 0x1C,     //复用开漏输出
	  GPIO_Mode_AF_PP = 0x18    //复用推挽输出
	}GPIOMode_TypeDef;


	2.2速度定义
	typedef enum
	{ 
	  GPIO_Speed_10MHz = 1,
	  GPIO_Speed_2MHz, 
	  GPIO_Speed_50MHz
	}GPIOSpeed_TypeDef;


3.函数：
3.1 RCC_APB2PeriphClockCmd（）  在总线上启动端口
	例： RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOC,ENABLE);
3.2 GPIO_SetBits   设置端口输出
	GPIO_WriteBit（哪一组，哪一个，设置/清零）    
	例： GPIO_WriteBit(GPIOB,GPIO_Pin_0,Bit_SET);
	GPIO_ResetBits /GPIO_SetBits
	例： GPIO_SetBits(GPIOB,GPIO_Pin_0);
	GPIO_Write 设置整组端口输出
	GPIO_Write(GPIOB,0x0001);



//案例
#[PWM呼吸灯]####################################################################
#include "stm32f10x.h" //STM 头文件 
#include "led.h"
#include "delay.h"

int main (void){//主程序
	u8 ENUM,i;
	u32 time;
	RCC_Configuration();
	LED_init();
	i = 0;
	ENUM = 1;
	time = 1;
	while(1) {
		if(ENUM) {
			time++;
			if(time == 500) {
				ENUM = 0;
			}
		}else {
			time--;
			if(time == 1) {
				 ENUM = 1;
			}
		}
		for(i=0;i<10;i++) {
			GPIO_WriteBit(GPIOB,LED,Bit_RESET);
			delay_us(time);
			GPIO_WriteBit(GPIOB,LED,Bit_SET);
			delay_us(501-time);
		}
    }
}

#[按键控制LED灯]####################################################################
#include "stm32f10x.h"
#include "led.h"
#include "delay.h"
#include "simplekey.h"

int main (void){
	RCC_Configuration();
	LED_init();
	KEY_init();
	while(1) {
		if(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1)) {
			delay_ms(20);
			if(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1)) {
				 GPIO_WriteBit(GPIOB,LED,(BitAction) 1-GPIO_ReadInputDataBit(GPIOB,LED));
				 while(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1));
			}
		}
    }
}

#[FLASH存储]####################################################################
#include "stm32f10x.h"
#include "led.h"
#include "delay.h"
#include "simplekey.h"
#include "flash.h"


int main (void){
	u16 a;
	u32 addr;
	RCC_Configuration();
	LED_init();
	KEY_init();
	addr = FLASH_page(127);
	a = FLASH_read(addr);
	GPIO_WriteBit(GPIOB,LED,(BitAction) a);
	while(1) {
		if(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1)) {
			delay_ms(20);
			if(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1)) {
				a = 1-GPIO_ReadInputDataBit(GPIOB,LED);
				FLASH_write(addr,a);
				GPIO_WriteBit(GPIOB,LED,(BitAction) a);
				while(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1));
			}
		}
    }
}

#[无源蜂鸣器]####################################################################
#include "stm32f10x.h"
#include "led.h"
#include "delay.h"
#include "simplekey.h"
#include "buzzer.h"

int main (void){
	RCC_Configuration();
	LED_init();
	KEY_init();
	BUZZER_init();
	BUZZER_play(300,554);
	while(1) {
		if(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1)) {
			delay_ms(20);
			if(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1)) {
				BUZZER_play(300,1000);
				GPIO_WriteBit(GPIOB,LED,(BitAction)(1-GPIO_ReadInputDataBit(GPIOB,LED)));
				while(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1));
			}
		}
    }
}

#[串口发送数据]####################################################################
#include "stm32f10x.h"
#include "led.h"
#include "delay.h"
#include "simplekey.h"
#include "buzzer.h"
#include "usart.h"

int main (void){
	RCC_Configuration();
	LED_init();
	KEY_init();
	BUZZER_init();
	USART1_init(115200,DISABLE);
	BUZZER_play(300,554);
	while(1) {
		if(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1)) {
			delay_ms(20);
			if(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1)) {
				BUZZER_play(300,1000);
				GPIO_WriteBit(GPIOB,LED,(BitAction)(1-GPIO_ReadInputDataBit(GPIOB,LED)));
				USART1_printf("hello%s\n","world");
				while(!GPIO_ReadInputDataBit(GPIOA,SIMPLE_KEY1));
			}
		}
    }
}

#[查询式串口接收数据]####################################################################
#include "stm32f10x.h"
#include "buzzer.h"
#include "usart.h"
#include "led.h"

int main (void){
	u8 buffer;
	RCC_Configuration();
	LED_init();
	BUZZER_init();
	USART1_init(115200,DISABLE);
	BUZZER_play(300,554);
	while(1) {
		if(USART_GetFlagStatus(USART1,USART_FLAG_RXNE) != RESET) {
			buffer = USART_ReceiveData(USART1);
			switch(buffer) {
				case '1':
				    BUZZER_play(300,1000);
				    GPIO_WriteBit(GPIOB,LED,(BitAction)(1-GPIO_ReadInputDataBit(GPIOB,LED)));
					USART1_printf("Switch Success");
				    break;
				default:
					break;
			}
		}
    }
}

#[RTC走时程序 ]####################################################################
#include "stm32f10x.h"
#include "led.h"
#include "rtc.h"
#include "usart.h"


int main (void){
	u8 buffer;
	u32 val;
	struct DateTime datetime;
	RCC_Configuration();
	datetime.year = 2018;
	datetime.month = 8;
	datetime.day = 22;
	datetime.hour = 19;
	datetime.minute = 40;
	datetime.second = 0;
	USART1_init(115200,DISABLE);
	USART1_printf("INIT USART1");
	LED_init();
	USART1_printf("INIT LED");
	RTC_init();
	val = RTC_Set(datetime);
	USART1_printf("INIT RTC[%d]",val);
	val=RTC_GetCounter();
	USART1_printf("INIT RTC[%d]",val);
	while(1) {
		 datetime = RTC_dateTime();
		 if(buffer != datetime.second) {
			buffer = datetime.second;
			val=RTC_GetCounter();
			USART1_printf("READ RTC[%d]\n",val);
		 	USART1_printf("%d-%d-%d %d:%d:%d (%d)\n",datetime.year,datetime.month,datetime.day,datetime.hour,datetime.minute,datetime.second,datetime.week);
		 	GPIO_WriteBit(GPIOB,LED,(BitAction)(datetime.second % 2));
		 }
	}	
}

#[触摸按键单击 ]####################################################################
#include "stm32f10x.h"
#include "led.h"
#include "touchkey.h"
#include "buzzer.h"

int main (void){
	RCC_Configuration();
	TOUCH_KEY_init();
	LED_init();
	BUZZER_init();
	while(1) {
	   	if(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_A)) {
			GPIO_WriteBit(GPIOB,LED,(BitAction)(1-GPIO_ReadInputDataBit(GPIOB,LED)));
			BUZZER_play(300,1000);
		}
		if(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_B)) {
			GPIO_WriteBit(GPIOB,LED,Bit_SET);
			BUZZER_play(300,1500);
		}
		if(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_C)) {
			GPIO_WriteBit(GPIOB,LED,Bit_RESET);
			BUZZER_play(300,2000);
		}
	}		
}

#[触摸按键单击 双击  长按 ]####################################################################
#include "stm32f10x.h"
#include "led.h"
#include "touchkey.h"
#include "buzzer.h"
#include "delay.h"

int main (void){
	u16 keyFlag;
	u8 i;
	RCC_Configuration();
	TOUCH_KEY_init();
	LED_init();
	BUZZER_init();
	while(1) {
	   	if(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_D)) {
			delay_ms(20);
			if(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_D)) {
				keyFlag = 0;
				i = 0;
				//长按判断时长  220
				while(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_D) && keyFlag < 220) {
					keyFlag++;
					delay_ms(10);
				}
				if(keyFlag >= 220) {
					//长按
					BUZZER_play(300,2000);
					GPIO_WriteBit(GPIOB,LED1,Bit_RESET);
					GPIO_WriteBit(GPIOB,LED2,Bit_RESET);
					while(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_D));
				}else {
					//双击判断时长 30
					for(i=0;i<30;i++) {
						delay_ms(10);
						if(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_D)) {
							keyFlag = 50000;
							//双击
							GPIO_WriteBit(GPIOB,LED2,Bit_SET);
							BUZZER_play(300,1500);
							while(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_D));
						}
					}
					if(keyFlag < 50000) {
						//单击
						GPIO_WriteBit(GPIOB,LED1,Bit_SET);
						BUZZER_play(300,1000);
					}	
				}
		   	}
		}
	}		
}


#[TM1640驱动数码管显示RTC走时 ]####################################################################
#include "stm32f10x.h"
#include "led.h"
#include "rtc.h"
#include "usart.h"
#include "tm1640.h"

int main (void){
	u8 buffer,sm1,sm2,sm3,sm4,sm5,sm6,sm7,sm0;
	u32 val;
	const u8 ledd[] = {0x40,0x01,0x02,0x04,0x08,0x10,0x20};
	struct DateTime datetime;
	RCC_Configuration();
	datetime.year = 2018;
	datetime.month = 8;
	datetime.day = 22;
	datetime.hour = 19;
	datetime.minute = 40;
	datetime.second = 0;
	USART1_init(115200,DISABLE);
	USART1_printf("INIT USART1");
	LED_init();
	USART1_printf("INIT LED");
	RTC_init();
	USART1_printf("INIT RTC");
	TM1640_init();
    USART1_printf("INIT TM1640");
	while(1) {
		 datetime = RTC_dateTime();
		 if(buffer != datetime.second) {
			buffer = datetime.second;
			val=RTC_GetCounter();
			USART1_printf("READ RTC[%d]\n",val);
		 	USART1_printf("%d-%d-%d %d:%d:%d (%d)\n",datetime.year,datetime.month,datetime.day,datetime.hour,datetime.minute,datetime.second,datetime.week);
			sm0 = datetime.month / 10;
			sm1 = datetime.month % 10;
			sm2 = datetime.day / 10;
			sm3 = datetime.day % 10;
			sm4 = datetime.hour / 10;
			sm5 = datetime.hour % 10;
			sm6 = datetime.minute / 10;
			sm7 = datetime.minute % 10;
			if(datetime.second%2) {
			   sm7 += 10;
			}
			TM1640_display(0,sm0);
			TM1640_display(1,sm1);
			TM1640_display(2,sm2);
			TM1640_display(3,sm3);
			TM1640_display(4,sm4);
			TM1640_display(5,sm5);
			TM1640_display(6,sm6);
			TM1640_display(7,sm7);
			TM1640_led(ledd[datetime.week]);
		 	GPIO_WriteBit(GPIOB,LED1,(BitAction)(datetime.second % 2));
			GPIO_WriteBit(GPIOB,LED2,(BitAction)(1-(datetime.second % 2)));
		 }
	}	
}

#[旋转编码器示例]####################################################################

#include "stm32f10x.h"
#include "led.h"
#include "rtc.h"
#include "usart.h"
#include "tm1640.h"
#include "rotaryencoder.h"
#include "delay.h"

int main (void){
	u8 encoder,sm0,sm1,sm2;
	u16 time;
	time = 0;
	RCC_Configuration();
	TM1640_init();
	USART1_init(115200,DISABLE);
	ENCODER_init();
	USART1_printf("%s","init success");
	while(1) {
		 encoder = 	ENCODER_read();
		 if(encoder == 2 && time > 0) {
		 	 time -= 5;
		 }
		 if(encoder ==1 && time <500) {
		 	 time += 5;
		 }
		 if(encoder == 10) {
		 	 time = 0;
		 }
		 if(encoder != 0) {
		 	 USART1_printf("%d",encoder);
		 }
		 sm0 = time / 100;
		 sm1 = (time / 10) % 10;
		 sm2 = time % 10;
		 TM1640_display(0,sm0);
		 TM1640_display(1,sm1);
		 TM1640_display(2,sm2);
		 TM1640_display(3,20);
		 TM1640_display(4,20);
		 TM1640_display(5,20);
		 TM1640_display(6,20);
		 TM1640_display(7,20);
	}	
}

#[数码管显示LM75A温度传感器读取]####################################################################

#include "stm32f10x.h"
#include "tm1640.h"
#include "lm75a.h"

int main (void){
	u8 buff[3];
	RCC_Configuration();
	IIC_init();
	TM1640_init();
	TM1640_display(0,20);
	TM1640_display(1,20);
	TM1640_display(2,20);
	TM1640_display(3,20);
	TM1640_display(4,20);
	TM1640_display(5,20);
	TM1640_display(6,20);
	TM1640_display(7,20);
	while(1) {
		LM75A_read(buff);
		TM1640_display(1,buff[1]/10);
		TM1640_display(2,buff[1]%10+10);
		TM1640_display(3,buff[2]/10);
		TM1640_display(4,buff[2]%10);	
	}	
}

#[OLD显示LM75A温度传感器读取]####################################################################

#include "stm32f10x.h"
#include "lm75a.h"
#include "oled0561.h"
#include "delay.h"

int main (void){
	u8 buff[3];
	delay_ms(100);
	RCC_Configuration();
	IIC_init();
	LM75A_read(buff);
	OLED_init();
	OLED_display8x16_str(0,"  Temp:");
	while(1){
		LM75A_read(buff);
		OLED_display8x16(16,2,buff[1]/10+0x30);
	    OLED_display8x16(24,2,buff[1]%10+0x30);
		OLED_display8x16(32,2,'.');
		OLED_display8x16(40,2,buff[2]/10+0x30);
		OLED_display8x16(48,2,buff[2]%10+0x30);
		delay_ms(100);
	}	
}

#[OLD显示图片 温度]####################################################################
#include "stm32f10x.h"
#include "lm75a.h"
#include "oled0561.h"
#include "delay.h"
#include "oleddata.h"

int main (void){
	u8 buff[3];
	delay_ms(100);
	RCC_Configuration();
	IIC_init();
	OLED_init();
	OLED_display128x64(IMGTAB);
	while(1){
		LM75A_read(buff);
		OLED_display8x16(72,6,buff[1]/10+0x30);
	    OLED_display8x16(80,6,buff[1]%10+0x30);
		OLED_display8x16(88,6,'.');
		OLED_display8x16(96,6,buff[2]/10+0x30);
		OLED_display8x16(104,6,buff[2]%10+0x30);
		delay_ms(100);
	}	
}

#[触摸键控制继电器]####################################################################
#include "stm32f10x.h"
#include "delay.h"
#include "relay.h"
#include "touchkey.h"

int main (void){
  TOUCH_KEY_init();
  Relay_init();
  while(1){
    if(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_A)) {
	  setRelay1(Bit_SET); 
	}
	if(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_B)) {
	  setRelay1(Bit_RESET);
	}
	if(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_C)) {
	  setRelay2(Bit_SET);
	}
	if(!GPIO_ReadInputDataBit(GPIOA,TOUCHKEY_D)) {
	  setRelay2(Bit_RESET);
	}	
  }	
}



#[XXXXXXXX ]####################################################################

#include "stm32f10x.h"
#include "led.h"
#include "rtc.h"
#include "usart.h"
#include "tm1640.h"
#include "rotaryencoder.h"
#include "delay.h"

int main (void){
	u8 buffer,sm1,sm2,sm3,sm4,sm5,sm6,sm7,sm0,encoder,i;
	u16 time;
	u32 val;
	const u8 ledd[] = {0x40,0x01,0x02,0x04,0x08,0x10,0x20};
	struct DateTime datetime;
	time = 0;
	RCC_Configuration();
	datetime.year = 2018;
	datetime.month = 8;
	datetime.day = 22;
	datetime.hour = 19;
	datetime.minute = 40;
	datetime.second = 0;
	USART1_init(115200,DISABLE);
	USART1_printf("INIT USART1");
	LED_init();
	USART1_printf("INIT LED");
	RTC_init();
	USART1_printf("INIT RTC");
	TM1640_init();
    USART1_printf("INIT TM1640");
	ENCODER_init();
	while(1) {
		 datetime = RTC_dateTime();
		 if(buffer != datetime.second) {
			buffer = datetime.second;
			val=RTC_GetCounter();
			USART1_printf("READ RTC[%d]\n",val);
		 	USART1_printf("%d-%d-%d %d:%d:%d (%d)\n",datetime.year,datetime.month,datetime.day,datetime.hour,datetime.minute,datetime.second,datetime.week);
			sm0 = datetime.month / 10;
			sm1 = datetime.month % 10;
			sm2 = datetime.day / 10;
			sm3 = datetime.day % 10;
			sm4 = datetime.hour / 10;
			sm5 = datetime.hour % 10;
			sm6 = datetime.minute / 10;
			sm7 = datetime.minute % 10;
			if(datetime.second%2) {
			   sm7 += 10;
			}
			TM1640_display(0,sm0);
			TM1640_display(1,sm1);
			TM1640_display(2,sm2);
			TM1640_display(3,sm3);
			TM1640_display(4,sm4);
			TM1640_display(5,sm5);
			TM1640_display(6,sm6);
			TM1640_display(7,sm7);
			TM1640_led(ledd[datetime.week]);
		 	GPIO_WriteBit(GPIOB,LED1,(BitAction)(datetime.second % 2));
		 }
		 encoder = 	ENCODER_read();
		 if(encoder == 1) {
		 	 time -= 5;
		 }
		 if(encoder ==2) {
		 	 time += 5;
		 }
		 if(encoder ==11) {
		 	 time -= 25;
		 }
		 if(encoder ==12) {
		 	 time += 25;
		 }
		 if(time >= 500) {
		 	time = 500;
		 }
		 if(time <= 25) {
		 	time = 0;
		 }
		 for(i=0;i<10;i++) {
			GPIO_WriteBit(GPIOB,LED2,Bit_RESET);
			delay_us(time);
			GPIO_WriteBit(GPIOB,LED2,Bit_SET);
			delay_us(501-time);
		}
	}	
}
